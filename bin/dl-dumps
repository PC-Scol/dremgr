#!/bin/bash
# -*- coding: utf-8 mode: sh -*- vim:sw=4:sts=4:et:ai:si:sta:fenc=utf-8
source /etc/nulib.sh || exit 1

function dl() {
    curl -fsSO -u "$DRE_USER:$DRE_PASS" "$DRE_URL/$1"
}

SCHEMAS=()
function add_schema() {
    local sum="$1" file="$2" schema
    schema="$file"
    schema="${schema%.bin}"
    schema="${schema##*-$Timestamp-}"
    SCHEMAS+=("$schema")
}

if [ -z "$DRE_URL" -o -z "$DRE_USER" -o -z "$DRE_PASS" ]; then
    # test
    DRE_URL=https://dre-dump.test-univ-reunion.pc-scol.fr
    DRE_USER=dre
    DRE_PASS='cahNaiHeeg}eiyah1rey'

    function psql() {
        docker compose -f ../docker-compose.yml exec db psql "$@"
    }
    function pg_restore() {
        docker compose -f ../docker-compose.yml exec -T db pg_restore "$@"
    }

    cd "$MYDIR/../../devel"
else
    [ -n "$APP_DATADIR" ] && cd "$APP_DATADIR/downloads"
fi

if [ -z "$DRE_PREFIX" ]; then
    DRE_PREFIX="${DRE_URL}"
    DRE_PREFIX="${DRE_PREFIX#https://dre-dump.}"
    DRE_PREFIX="${DRE_PREFIX%/*}"
    DRE_PREFIX="${DRE_PREFIX%.pc-scol.fr}"
fi

force_dlsums=1
Timestamp=
args=(
    "télécharger les dumps"
    -n,--no-force-dlsums force_dlsums= "ne pas retélécharger les checksums si le fichier existe déjà"
    -@:,--timestamp Timestamp= "spécifier la date pour laquelle on fait le téléchagement, au format YYYYMMDD"
)
parse_args "$@"; set -- "${args[@]}"

[ -n "$Timestamp" ] || setx Timestamp=date +%Y%m%d

sums="checksums-$Timestamp"
if [ ! -f "$sums" -o -n "$force_dlsums" ]; then
    estep "$sums"
    dl "$sums" || die
fi
eval "$(sed 's/^/add_schema /' "$sums")"

version="DRE_VERSION_$Timestamp"
if [ ! -f "$version" ]; then
    estep "$version"
    if dl "$version"; then
        :
    elif dl "${version:0:18}12${version:18}"; then
        # @$*#! de bug
        mv "${version:0:18}12${version:18}" "$version"
    else
        # version est facultatif pour le moment
        version=
    fi
fi
for schema in "${SCHEMAS[@]}"; do
    file="${DRE_PREFIX}-$Timestamp-$schema.bin"
    if [ ! -f "$file" ]; then
        estep "$file"
        dl "$file" || die
    fi
done

estep "Vérifications"
sha256sum --status -c "$sums" || die

estep "Nettoyage"
schema_list=
for schema in "${SCHEMAS[@]}"; do
    schema_list="${schema_list}${schema_list:+, }schema_${schema}"
done
psql -d dre -c "drop schema if exists $schema_list cascade;" || die

estep "Importation"
for schema in "${SCHEMAS[@]}"; do
    file="${DRE_PREFIX}-$Timestamp-$schema.bin"

    estep "$schema: nettoyage"
    psql -d dre -c "drop extension if exists unaccent, pg_trgm cascade;" || die

    estep "$schema: import $file"
    pg_restore -d dre --no-owner --no-acl -Fc <"$file" || die
    psql -d dre -c "\
grant usage on schema schema_$schema to reader;
grant select on all tables in schema schema_$schema to reader;
alter table if exists __provisionning_changelog_lock set schema schema_$schema;
alter table if exists __provisionning_changelog set schema schema_$schema;
" || die
done

if [ -n "$version" ]; then
    estep "Maj version"
    version="$(<"$version")"
    version="${version/\}/, \"timestamp\": \"$Timestamp\"\}}"
    psql -d dre -c "\
create table if not exists version (majeure int, mineure int, patch int, prerelease varchar(8), timestamp varchar(8));
truncate table version;
insert into version(majeure, mineure, patch, prerelease, timestamp)
select * from json_populate_record(null::version, '$version');
" || die
fi

estep "Nettoyage"
find -name "checksums-*" -mtime +30 -delete
find -name "DRE_VERSION_*" -mtime +30 -delete
find -name "$DRE_PREFIX-*" -mtime +30 -delete

estep "Fin de l'import"
