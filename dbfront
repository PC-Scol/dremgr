#!/bin/bash
# -*- coding: utf-8 mode: sh -*- vim:sw=4:sts=4:et:ai:si:sta:fenc=utf-8
MYDIR="$(cd "$(dirname -- "$0")"; pwd)"
"$MYDIR/sbin/runphp" --bs --ue --ci || exit 1
DREMGR="$MYDIR"
source "$DREMGR/sbin/vendor/nulib/php/load.sh" || exit 1
source "$DREMGR/sbin/functions.sh" || exit 1

function _set_composefiles() {
    composefile="$DREMGR/dbfront-docker-compose.yml"
    composefiles=("$composefile")
    composeargs=(-f "$composefile")
    localfile="$DREMGR/dbfront-docker-compose.local.yml"
    if [ -f "$localfile" ]; then
        composefiles+=("$localfile")
        composeargs+=(-f "$localfile")
    fi
}

function start_dbfront() {
    local composefile localfile; local -a composefiles composeargs
    _set_composefiles

    [ -f "$composefile" ] || die "$composefile: fichier introuvable"
    if [ -n "$ForceStart" ]; then
        :
    elif dcrunning "${composefiles[@]}"; then
        enote "Le frontal bdd DRE est démarré"
        return
    fi

    #local reload
    #dcrunning "${composefiles[@]}" && reload=1

    "$MYDIR/build" ${Rebuild:+--rebuild} || die

    estep "Démarrage du frontal bdd DRE"
    docker compose "${composeargs[@]}" up -d --wait || die

    #if [ -n "$reload" ]; then
    #    estep "Rechargement pgAdmin"
    #    sleep 2
    #    docker compose exec pgadmin /g/pgadmin/reload
    #fi
}

function stop_dbfront() {
    local composefile localfile; local -a composefiles composeargs
    _set_composefiles

    [ -f "$composefile" ] || return 0
    if dcrunning "${composefiles[@]}"; then
        estep "Arrêt du frontal bdd DRE"
        docker compose "${composeargs[@]}" down || die
    fi
}

function refresh_dbfront() {
    local ForceStart=1
    start_dbfront "$@"
}

function restart_dbfront() {
    stop_dbfront "$@"
    start_dbfront "$@"
}

function pgbouncer_prompt() {
    local composefile localfile; local -a composefiles
    _set_composefiles

    [ -f "$composefile" ] || return 0
    if dcrunning "${composefiles[@]}"; then
        estep "Invite pgbouncer"
        eval "$(
          source "$DREMGR/.defaults.env"
          source "$DREMGR/dremgr.env"
          source "$DREMGR/.forced.env"
          echo "local user password"
          echo_setv user="$PGBOUNCER_ADMIN_USER"; echo_setv password="$PGBOUNCER_ADMIN_PASS"
        )"
        docker compose "${composeargs[@]}" exec pgbouncer psql -d "dbname=pgbouncer user=$user password=$password" "$@" || die
    else
        eerror "Impossible de lancer l'invite pgbouncer: frontal bdd DRE est arrêté"
    fi
}

action=auto
Rebuild=
args=(
    "Gérer le frontal bdd de DRE"
    #"usage"
    --check-only action=none "++Ne faire que la vérification de l'environnement"
    -s,--start action=start "Démarrer le frontal bdd"
    -k,--stop action=stop "Arrêter le frontal bdd"
    -r,--refresh action=refresh "(Re)démarrer le frontal bdd si nécessaire"
    -R,--restart action=restart "Forcer le (re)démarrage du frontal bdd"
    -b,--rebuild Rebuild=1 "++Forcer le rebuild de l'image avant le démarrage"
    -q,--pgbouncer action=pgbouncer "++Lancer une invite psql pour piloter pgbouncer"
)
parse_args "$@"; set -- "${args[@]}"

[ -f "$DREMGR/dremgr.env" ] || die "dremgr.env: fichier introuvable"
eval "$(source "$DREMGR/dremgr.env"; echo_setv APP_PROFILES="$APP_PROFILES")"
[ -n "$APP_PROFILES" ] || die "Aucun profil n'est défini"

IS_DBFRONT=1
run_check_env || exit 0
[ "$action" == auto ] && action=start
[ "$action" == none ] && exit 0

Profile=
ForceStart=
ensure_dirs

case "$action" in
start) start_dbfront "$@";;
stop) stop_dbfront "$@";;
refresh) refresh_dbfront "$@";;
restart) restart_dbfront "$@";;
pgbouncer) pgbouncer_prompt "$@";;
*) die "$action: action non implémentée";;
esac
