#!/bin/bash
# -*- coding: utf-8 mode: sh -*- vim:sw=4:sts=4:et:ai:si:sta:fenc=utf-8
MYDIR="$(dirname -- "$0")"
"$MYDIR/sbin/rundk" --bs --ue --ci || exit 1
source "$MYDIR/sbin/vendor/nulib/php/load.sh" || exit 1
DREMGR="$MYDIR"
source "$MYDIR/sbin/functions.sh" || exit 1

function start_dre() {
    local composefile="$DREMGR/inst-docker-compose.yml"
    [ -f "$composefile" ] || die "$composefile: fichier introuvable"
    if [ -n "$ForceStart" ]; then
        :
    elif dcrunning "$composefile"; then
        enote "DRE [$Profile] est démarré"
        return
    fi

    "$MYDIR/build" ${Rebuild:+--rebuild} || die
    estep "Démarrage de DRE [$Profile]"
    docker compose -f "$composefile" up -d --wait || die
}

function stop_dre() {
    local composefile="$DREMGR/inst-docker-compose.yml"
    [ -f "$composefile" ] || return 0
    if dcrunning "$composefile"; then
        estep "Arrêt de DRE [$Profile]"
        docker compose -f "$composefile" down || die
    fi
}

function refresh_dre() {
    local ForceStart=1
    start_dre "$@"
}

function restart_dre() {
    stop_dre "$@"
    start_dre "$@"
}

function import_dumps() {
    local composefile="$DREMGR/inst-docker-compose.yml"
    [ -f "$composefile" ] || return 0
    if dcrunning "$composefile"; then
        estep "Import des dumps [$Profile]"
        docker compose -f "$composefile" exec cron dl-dumps "$@" || die
    else
        eerror "Impossible d'importer les dumps: DRE [$Profile] est arrêté"
    fi
}

case "$MYNAME" in
*_inst) Profile="${MYNAME%_inst}";;
*) Profile=prod;;
esac
action=auto
Rebuild=
args=(
    "Gérer cette instance de DRE"
    #"usage"
    --check-only action=none "++Ne faire que la vérification de l'environnement"
    --bootstrap action=bootstrap "++Mettre à jour les outils en lançant de nouveau lib/sbin/bootstrap"
    -g:,--profile Profile= "\
++Spécifier le profil. Un fichier de configuration PROFILE_profile.env doit exister.
Si cette option n'est pas spécifiée, le profil sélectionné par défaut est $Profile"
    -A,--all-profiles Profile=ALL "++Faire l'opération pour tous les profils définis dans front.env"
    -P,--prod Profile=prod "++alias pour --profile prod"
    -T,--test Profile=test "++alias pour --profile test"
    -s,--start action=start "Démarrer DRE"
    -k,--stop action=stop "Arrêter DRE"
    -r,--refresh action=refresh "(Re)démarrer DRE si nécessaire"
    -R,--restart action=restart "Forcer le (re)démarrage de DRE"
    -b,--rebuild Rebuild=1 "++Forcer le rebuild de l'image avant le démarrage"
    -i,--import action=import "Lancer l'import maintenant, au lieu d'attendre la planification"
)
parse_args "$@"; set -- "${args[@]}"

if [ "$Profile" == ALL ]; then
    [ -f "$DREMGR/front.env" ] || die "front.env: fichier introuvable"
    eval "$(source "$DREMGR/front.env"; echo_setv APP_PROFILES="$APP_PROFILES")"
    [ -n "$APP_PROFILES" ] || die "Aucun profil n'est défini"

    args=(
        ${Rebuild:+--rebuild}
    )
    case "$action" in
    none) args+=(--check-only);;
    bootstrap) args+=(--bootstrap);;
    auto) ;;
    *) args+=("--$action");;
    esac

    read -a profiles <<<"${APP_PROFILES//
/ }"
    for profile in "${profiles[@]}"; do
        etitle "$profile"
        "$MYSELF" --profile "$profile" "${args[@]}" -- "$@"
        eend
    done
    exit
fi

Profile="${Profile##*/}"
Profile="${Profile%_profile.env}"
envfile="$DREMGR/${Profile}_profile.env"

inst_check_env || exit 0
if [ -f "$envfile" ]; then
    dredata="$MYDIR/var/${Profile}-dredata"
    for dir in addons downloads; do
        mkdir -p "$dredata/$dir"
    done
fi
[ "$action" == auto ] && action=start

[ -f "$envfile" ] || die "$Profile: profil invalide (${Profile}-profile.env: fichier de profil introuvable)"
[ "$action" == none ] && exit 0

ForceStart=
case "$action" in
bootstrap) "$DREMGR/sbin/bootstrap" --force "$@";;
start) start_dre "$@";;
stop) stop_dre "$@";;
refresh) refresh_dre "$@";;
restart) restart_dre "$@";;
import) import_dumps "$@";;
*) die "$action: action non implémentée";;
esac
