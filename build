#!/bin/bash
# -*- coding: utf-8 mode: sh -*- vim:sw=4:sts=4:et:ai:si:sta:fenc=utf-8
MYDIR="$(dirname -- "$0")"
"$MYDIR/sbin/bootstrap" && source "$MYDIR/sbin/vendor/nulib/php/load.sh" || exit 1
DREINST="$MYDIR"
source "$DREINST/sbin/functions.sh" || exit 1

BUILD_ARGS=(
    REGISTRY
    APT_PROXY
    APT_MIRROR
    SEC_MIRROR
    TIMEZONE
)

function _build() {
    local image="${PRIVAREG:+$PRIVAREG/}dreinst/$1"
    if [ -n "$ForceBuild" -o -z "$(dklsimg "$image")" ]; then
        estep "Construction $image"
        args=(
            -f "$DREINST/Dockerfile.$1"
            ${NoCache:+--no-cache}
            ${BuildPlain:+--progress plain}
            -t "$image"
        )
        for arg in "${BUILD_ARGS[@]}"; do
            args+=(--build-arg "$arg=${!arg}")
        done
        docker build "${args[@]}" "$DREINST"
    fi
}
function build_inst() {
    local image
    source "$DREINST/build.env"

    _build db
    _build web
    _build pgadmin
}

ForceUpdate=
action=build
ForceBuild=
NoCache=
BuildPlain=
args=(
    "Construire les images pour DRE"
    #"usage"
    --check-only action=none "++Ne faire que la vérification de l'environnement"
    --bootstrap action=bootstrap "++Mettre à jour les outils en lançant de nouveau lib/sbin/bootstrap"
    --force-update ForceUpdate=1 "++Forcer la mise à jour des fichiers dépendants"
    -r,--rebuild ForceBuild=1 "Forcer la (re)construction de l'image"
    -j,--no-cache NoCache=1 "++Construire l'image en invalidant le cache"
    -p,--build-plain BuildPlain=1 "++Afficher le détail du build"
)
parse_args "$@"; set -- "${args[@]}"

build_check_env || die
[ "$action" == none ] && exit 0

case "$action" in
bootstrap) "$DREINST/sbin/bootstrap" --force "$@";;
build) build_inst "$@";;
*) die "$action: action non implémentée";;
esac
